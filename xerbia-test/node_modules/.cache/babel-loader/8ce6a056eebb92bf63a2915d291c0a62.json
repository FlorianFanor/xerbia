{"ast":null,"code":"import * as actions from \"../actions/Types\";\n\nconst CartReducer = (state = [], action) => {\n  switch (action.type) {\n    case actions.ADD_TO_CART:\n      state = [...state, action.payload];\n      let parsedState = state.map(row => {\n        const {\n          isbn,\n          ...rest\n        } = row;\n        return {\n          id: isbn,\n          ...rest\n        };\n      });\n      return parsedState;\n\n    case actions.REMOVE_FROM_CART:\n      console.log(\"Hit removed\", action);\n      console.log(\"Hit state\", state);\n      state.map(stateElement => {\n        if (stateElement.id.findIndex(item => item === action.payload) !== -1) {\n          state.id = state.isbn.filter(id => id !== action.payload);\n          return state;\n        }\n\n        state.id = [...state.id, action.payload];\n      });\n      return state;\n\n    default:\n      console.log(\"default\", state);\n      return state;\n  }\n};\n\n_c = CartReducer;\nexport default CartReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartReducer\");","map":{"version":3,"sources":["/home/flo/Documents/Practice*/React/Bibliotheque/xerbia-test/src/components/reducers/CartReducer.tsx"],"names":["actions","CartReducer","state","action","type","ADD_TO_CART","payload","parsedState","map","row","isbn","rest","id","REMOVE_FROM_CART","console","log","stateElement","findIndex","item","filter"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,kBAAzB;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAU,GAAG,EAAd,EAAkBC,MAAlB,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKJ,OAAO,CAACK,WAAb;AACEH,MAAAA,KAAK,GAAG,CAAC,GAAGA,KAAJ,EAAWC,MAAM,CAACG,OAAlB,CAAR;AAEA,UAAIC,WAAW,GAAGL,KAAK,CAACM,GAAN,CAAWC,GAAD,IAAc;AACxC,cAAM;AAAEC,UAAAA,IAAF;AAAQ,aAAGC;AAAX,YAAoBF,GAA1B;AACA,eAAO;AAAEG,UAAAA,EAAE,EAAEF,IAAN;AAAY,aAAGC;AAAf,SAAP;AACD,OAHiB,CAAlB;AAKA,aAAOJ,WAAP;;AAEF,SAAKP,OAAO,CAACa,gBAAb;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BZ,MAA3B;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBb,KAAzB;AACAA,MAAAA,KAAK,CAACM,GAAN,CAAWQ,YAAD,IAAuB;AAC/B,YACEA,YAAY,CAACJ,EAAb,CAAgBK,SAAhB,CAA2BC,IAAD,IAAeA,IAAI,KAAKf,MAAM,CAACG,OAAzD,MACA,CAAC,CAFH,EAGE;AACAJ,UAAAA,KAAK,CAACU,EAAN,GAAWV,KAAK,CAACQ,IAAN,CAAWS,MAAX,CAAmBP,EAAD,IAAaA,EAAE,KAAKT,MAAM,CAACG,OAA7C,CAAX;AACA,iBAAOJ,KAAP;AACD;;AACDA,QAAAA,KAAK,CAACU,EAAN,GAAW,CAAC,GAAGV,KAAK,CAACU,EAAV,EAAcT,MAAM,CAACG,OAArB,CAAX;AACD,OATD;AAWA,aAAOJ,KAAP;;AAEF;AACEY,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBb,KAAvB;AACA,aAAOA,KAAP;AA7BJ;AA+BD,CAhCD;;KAAMD,W;AAkCN,eAAeA,WAAf","sourcesContent":["import * as actions from \"../actions/Types\";\n\nconst CartReducer = (state: any = [], action: any) => {\n  switch (action.type) {\n    case actions.ADD_TO_CART:\n      state = [...state, action.payload];\n\n      let parsedState = state.map((row: any) => {\n        const { isbn, ...rest } = row;\n        return { id: isbn, ...rest };\n      });\n\n      return parsedState;\n\n    case actions.REMOVE_FROM_CART:\n      console.log(\"Hit removed\", action);\n      console.log(\"Hit state\", state);\n      state.map((stateElement: any) => {\n        if (\n          stateElement.id.findIndex((item: any) => item === action.payload) !==\n          -1\n        ) {\n          state.id = state.isbn.filter((id: any) => id !== action.payload);\n          return state;\n        }\n        state.id = [...state.id, action.payload];\n      });\n\n      return state;\n\n    default:\n      console.log(\"default\", state);\n      return state;\n  }\n};\n\nexport default CartReducer;\n"]},"metadata":{},"sourceType":"module"}