{"ast":null,"code":"import * as actions from \"../actions/Types\";\n\nconst CartReducer = (state = [], action) => {\n  switch (action.type) {\n    case actions.ADD_TO_CART:\n      state = [...state, action.payload];\n      let parsedState = state.map(row => {\n        const {\n          isbn,\n          ...rest\n        } = row;\n        return {\n          id: isbn,\n          ...rest\n        };\n      });\n      return parsedState;\n\n    case actions.REMOVE_FROM_CART:\n      console.log(\"Hit state\", state);\n      action.payload.map(removedElement => {\n        console.log(\"Hit removedElement\", removedElement);\n\n        if (state.findIndex(item => item.id === removedElement) !== -1) {\n          state = state.filter(item => item.id !== removedElement);\n          console.log(\"Removed\", state);\n          return state;\n        } // state.id = [...state.id, removedElement];\n\n      });\n      return state;\n\n    default:\n      console.log(\"default\", state);\n      return state;\n  }\n};\n\n_c = CartReducer;\nexport default CartReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartReducer\");","map":{"version":3,"sources":["/home/flo/Documents/Practice*/React/Bibliotheque/xerbia-test/src/components/reducers/CartReducer.tsx"],"names":["actions","CartReducer","state","action","type","ADD_TO_CART","payload","parsedState","map","row","isbn","rest","id","REMOVE_FROM_CART","console","log","removedElement","findIndex","item","filter"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,kBAAzB;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAU,GAAG,EAAd,EAAkBC,MAAlB,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKJ,OAAO,CAACK,WAAb;AACEH,MAAAA,KAAK,GAAG,CAAC,GAAGA,KAAJ,EAAWC,MAAM,CAACG,OAAlB,CAAR;AAEA,UAAIC,WAAW,GAAGL,KAAK,CAACM,GAAN,CAAWC,GAAD,IAAc;AACxC,cAAM;AAAEC,UAAAA,IAAF;AAAQ,aAAGC;AAAX,YAAoBF,GAA1B;AACA,eAAO;AAAEG,UAAAA,EAAE,EAAEF,IAAN;AAAY,aAAGC;AAAf,SAAP;AACD,OAHiB,CAAlB;AAKA,aAAOJ,WAAP;;AAEF,SAAKP,OAAO,CAACa,gBAAb;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBb,KAAzB;AAEAC,MAAAA,MAAM,CAACG,OAAP,CAAeE,GAAf,CAAoBQ,cAAD,IAA4B;AAC7CF,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCC,cAAlC;;AACA,YAAId,KAAK,CAACe,SAAN,CAAiBC,IAAD,IAAeA,IAAI,CAACN,EAAL,KAAYI,cAA3C,MAA+D,CAAC,CAApE,EAAuE;AACrEd,UAAAA,KAAK,GAAGA,KAAK,CAACiB,MAAN,CAAcD,IAAD,IAAeA,IAAI,CAACN,EAAL,KAAYI,cAAxC,CAAR;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBb,KAAvB;AACA,iBAAOA,KAAP;AACD,SAN4C,CAO7C;;AACD,OARD;AAUA,aAAOA,KAAP;;AACF;AACEY,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBb,KAAvB;AACA,aAAOA,KAAP;AA3BJ;AA6BD,CA9BD;;KAAMD,W;AAgCN,eAAeA,WAAf","sourcesContent":["import * as actions from \"../actions/Types\";\n\nconst CartReducer = (state: any = [], action: any) => {\n  switch (action.type) {\n    case actions.ADD_TO_CART:\n      state = [...state, action.payload];\n\n      let parsedState = state.map((row: any) => {\n        const { isbn, ...rest } = row;\n        return { id: isbn, ...rest };\n      });\n\n      return parsedState;\n\n    case actions.REMOVE_FROM_CART:\n      console.log(\"Hit state\", state);\n\n      action.payload.map((removedElement: string) => {\n        console.log(\"Hit removedElement\", removedElement);\n        if (state.findIndex((item: any) => item.id === removedElement) !== -1) {\n          state = state.filter((item: any) => item.id !== removedElement);\n          console.log(\"Removed\", state);\n          return state;\n        }\n        // state.id = [...state.id, removedElement];\n      });\n\n      return state;\n    default:\n      console.log(\"default\", state);\n      return state;\n  }\n};\n\nexport default CartReducer;\n"]},"metadata":{},"sourceType":"module"}